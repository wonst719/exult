name: snapshots-windows

on:
  schedule:
    - cron: "0 00 * * *" # Daily at 00:00 UTC
  workflow_dispatch:

jobs:
  snapshots-windows:
    if: ${{ github.repository_owner == 'exult' }}
    runs-on: windows-2019
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Activity check
        shell: bash
        run: |
          DATEUTC=$(curl -sL https://api.github.com/repos/exult/exult/commits | jq -r '[.[]][0]' | jq -r '.commit.committer.date')
          TIMESTAMP=$(date --utc -d "$DATEUTC" +%s)
          DAYS=$(( ($(date --utc +%s) - $TIMESTAMP) / 86400 ))
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo EXULT_REPO_ALIVE=true >> $GITHUB_ENV
          else
            if [ $DAYS -gt 0 ]; then
              echo EXULT_REPO_ALIVE=false >> $GITHUB_ENV
            else
              echo EXULT_REPO_ALIVE=true >> $GITHUB_ENV
            fi
          fi
      - name: Install dependencies
        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: MSYS
          install: |
            base-devel
            git
            p7zip
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-binutils
            mingw-w64-x86_64-ntldd
            mingw-w64-x86_64-SDL2
            mingw-w64-x86_64-fluidsynth
            mingw-w64-x86_64-libogg
            mingw-w64-x86_64-libvorbis
            mingw-w64-x86_64-munt-mt32emu
            mingw-w64-x86_64-libpng
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-SDL2_image
            mingw-w64-x86_64-gtk3
            mingw-w64-x86_64-adwaita-icon-theme
            mingw-w64-x86_64-libxml2
            mingw-w64-x86_64-freetype
            mingw-w64-x86_64-gtk2
            mingw-w64-x86_64-gimp
            mingw-w64-i686-toolchain
            mingw-w64-i686-binutils
            mingw-w64-i686-ntldd
            mingw-w64-i686-SDL2
            mingw-w64-i686-fluidsynth
            mingw-w64-i686-libogg
            mingw-w64-i686-libvorbis
            mingw-w64-i686-munt-mt32emu
            mingw-w64-i686-zlib
            mingw-w64-i686-SDL2_image
            mingw-w64-i686-gtk3
            mingw-w64-i686-adwaita-icon-theme
            mingw-w64-i686-libxml2
            mingw-w64-i686-freetype
            mingw-w64-i686-gtk2
            mingw-w64-i686-gimp
      - name: Checkout code for i686 build
        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}
        uses: actions/checkout@master
        with:
          path: exult-i686
      - name: Build i686
        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}
        env:
          MSYSTEM: MINGW32
          ARCH: i686
        run: |
          SNAPSHOT_PATH=$(cygpath -m ~/Exult-dist)
          cd $GITHUB_WORKSPACE/exult-$ARCH
          mkdir -p ${SNAPSHOT_PATH}
          make -j2 -f Makefile.mingw DISTPATH=${SNAPSHOT_PATH} dist studiodist toolsdist plugindist
          for ff in bgkeyring islefaq sifixes; do
            pushd content/${ff}
            make -j2 -f Makefile.mingw ${ff}dir=${SNAPSHOT_PATH}/${ff} install
            popd
          done
          echo "EXULT_SNAPSHOT_PATH=${SNAPSHOT_PATH}" >> $GITHUB_ENV
          echo "MSYSHOME=${HOME}" >> $GITHUB_ENV
      - name: Checkout code for x86_64 build
        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}
        uses: actions/checkout@master
        with:
          path: exult-x86_64
      - name: Build x86_64
        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}
        env:
          MSYSTEM: MINGW64
          ARCH: x86_64
        run: |
          SNAPSHOT_PATH=$(cygpath -m ~/Exult-dist)
          cd $GITHUB_WORKSPACE/exult-$ARCH
          mkdir -p ${SNAPSHOT_PATH}
          make -j2 -f Makefile.mingw DISTPATH=${SNAPSHOT_PATH} dist studiodist toolsdist plugindist
          echo "EXULT_SNAPSHOT_PATH=${SNAPSHOT_PATH}" >> $GITHUB_ENV
      - name: Create installers
        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}
        run: |
          cd ${{ env.EXULT_SNAPSHOT_PATH }}
          "/c/Program Files (x86)/Inno Setup 6/ISCC.exe" exult_installer.iss
          "/c/Program Files (x86)/Inno Setup 6/ISCC.exe" exult_studio_installer.iss
          "/c/Program Files (x86)/Inno Setup 6/ISCC.exe" exult_tools_installer.iss
          "/c/Program Files (x86)/Inno Setup 6/ISCC.exe" exult_shpplugin_installer.iss
          "/c/Program Files/7-Zip/7z.exe" -tzip a Keyring.zip -mx9 -mmt ./bgkeyring/*
          "/c/Program Files/7-Zip/7z.exe" -tzip a SFisland.zip -mx9 -mmt ./islefaq/*
          "/c/Program Files/7-Zip/7z.exe" -tzip a Sifixes.zip -mx9 -mmt ./sifixes/*
          echo "GITHUB_REF=v1.9.0.$(date --utc +'%Y%m%d')" >> $GITHUB_ENV
      - name: VirusTotal Scan
        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}
        id: scan_files
        uses: crazy-max/ghaction-virustotal@v2
        with:
          vt_api_key: ${{ secrets.VT_API_KEY }}
          github_token: ${{ github.token }}
          update_release_body: true
          files: |
            ${{ env.EXULT_SNAPSHOT_PATH }}/Exult.exe
            ${{ env.EXULT_SNAPSHOT_PATH }}/ExultStudio.exe
            ${{ env.EXULT_SNAPSHOT_PATH }}/ExultTools.exe
            ${{ env.EXULT_SNAPSHOT_PATH }}/Gimp20Plugin.exe
      - name: Generate VirusTotal Body
        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}
        run: |
          echo "Snapshot ${{ env.GITHUB_REF }}" > ${{ env.EXULT_SNAPSHOT_PATH }}/body.txt
          echo "" >> ${{ env.EXULT_SNAPSHOT_PATH }}/body.txt
          echo "ðŸ›¡ [VirusTotal GitHub Action](https://github.com/crazy-max/ghaction-virustotal) analysis:" >> ${{ env.EXULT_SNAPSHOT_PATH }}/body.txt
          echo "" >> ${{ env.EXULT_SNAPSHOT_PATH }}/body.txt
          analysis="${{ steps.scan_files.outputs.analysis }}"
          while read -d, -r pair; do
            IFS='=' read -r filename analysisURL <<<"$pair"
            echo "* [$(basename $filename)]($analysisURL)" >> ${{ env.EXULT_SNAPSHOT_PATH }}/body.txt
          done <<<"$analysis,"
      - name: Create release
        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: snapshot-${{ env.GITHUB_REF }}
          release_name: Snapshot ${{ env.GITHUB_REF }}
          body_path: ${{ env.EXULT_SNAPSHOT_PATH }}/body.txt
          draft: true
          prerelease: false
      # Theses pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`.
      # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
      - name: Upload Exult snapshot
        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXULT_SNAPSHOT_PATH }}/Exult.exe
          asset_name: Exult.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload Exult Studio snapshot
        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXULT_SNAPSHOT_PATH }}/ExultStudio.exe
          asset_name: ExultStudio.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload Tools snapshot
        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXULT_SNAPSHOT_PATH }}/ExultTools.exe
          asset_name: ExultTools.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload Gimp Plugin snapshot
        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXULT_SNAPSHOT_PATH }}/Gimp20Plugin.exe
          asset_name: Gimp20Plugin.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload Keyring snapshot
        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXULT_SNAPSHOT_PATH }}/Keyring.zip
          asset_name: Keyring.zip
          asset_content_type: application/zip
      - name: Upload SourceForge Island snapshot
        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXULT_SNAPSHOT_PATH }}/SFisland.zip
          asset_name: SFisland.zip
          asset_content_type: application/zip
      - name: Upload SI Fixes snapshot
        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXULT_SNAPSHOT_PATH }}/Sifixes.zip
          asset_name: Sifixes.zip
          asset_content_type: application/zip
      - name: Finish release
        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
      - name: save-artifacts
        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}
        run: |
          cd $GITHUB_WORKSPACE
          mkdir -p snapshot-files
          cp ${{ env.EXULT_SNAPSHOT_PATH }}/Exult.exe ./snapshot-files
          cp ${{ env.EXULT_SNAPSHOT_PATH }}/ExultStudio.exe ./snapshot-files
          cp ${{ env.EXULT_SNAPSHOT_PATH }}/ExultTools.exe ./snapshot-files
          cp ${{ env.EXULT_SNAPSHOT_PATH }}/Gimp20Plugin.exe ./snapshot-files
          cp ${{ env.EXULT_SNAPSHOT_PATH }}/Keyring.zip ./snapshot-files
          cp ${{ env.EXULT_SNAPSHOT_PATH }}/SFisland.zip ./snapshot-files
          cp ${{ env.EXULT_SNAPSHOT_PATH }}/Sifixes.zip ./snapshot-files
      - name: Upload artifacts
        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}
        uses: actions/upload-artifact@v2
        with:
          name: "snapshot files"
          path: snapshot-files
  # new job, now on Ubuntu
  snapshot-upload:
    runs-on: ubuntu-latest
    if: ${{ github.repository_owner == 'exult' }}
    needs: snapshots-windows
    steps:
      - name: Activity check
        shell: bash
        run: |
          DATEUTC=$(curl -sL https://api.github.com/repos/exult/exult/commits | jq -r '[.[]][0]' | jq -r '.commit.committer.date')
          TIMESTAMP=$(date --utc -d "$DATEUTC" +%s)
          DAYS=$(( ($(date --utc +%s) - $TIMESTAMP) / 86400 ))
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo EXULT_REPO_ALIVE=true >> $GITHUB_ENV
          else
            if [ $DAYS -gt 0 ]; then
              echo EXULT_REPO_ALIVE=false >> $GITHUB_ENV
            else
              echo EXULT_REPO_ALIVE=true >> $GITHUB_ENV
            fi
          fi
      - name: Install SSH key
        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}
        uses: shimataro/ssh-key-action@v2
        with:
          key: "${{ secrets.SSH_PRIVATE_KEY }}"
          name: id_rsa
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
      - name: Download artifacts
        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}
        uses: actions/download-artifact@v2
        with:
          name: "snapshot files"
      - shell: bash
        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}
        run: |
          cd $GITHUB_WORKSPACE
          scp -i ~/.ssh/id_rsa *.exe *.zip ${{ secrets.SCP_HOST }}:${{ secrets.PROJECT_HOME }}/htdocs/snapshots/
      # delete-artifact
      - name: Delete artifact
        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}
        uses: geekyeggo/delete-artifact@v1
        with:
          name: "snapshot files"
          failOnError: false
